#pragma version 8
// resource: R_Txn
txn ApplicationID
bz alloc
byte base64()
app_global_get
dup
int 0
extract_uint64
store 1 // GV_currentStep :: UInt
int 8
extract_uint64
store 2 // GV_currentTime :: UInt
byte base64(AA==)
app_global_get
preamble:
pushbytess base64(GVxGuw==) base64(Ulb9rA==) base64(39kjKA==)
txna ApplicationArgs 0
match _reachp_2 _reachp_0 _reachp_1
errl:
err
_reachi_0:
txn Sender
store 14 // Role1/65
load 11 // v124
int 0
extract_uint64
store 12 // v123
load 11 // v124
int 8
extract_uint64
store 13 // request/66
byte base64(rNEfww==)
load 12 // v123
itob
concat
load 13 // request/66
itob
concat
log // up to 20 bytes
// ^ log: "_reach_e0" [v123,request/66] "_reach_e0(uint64,uint64)"
load 12 // v123
callsub l2_LF_timeCheck
l3_LF_svsDump_1:
load 14 // Role1/65
load 13 // request/66
itob
concat
int 1
global Round
updateStateNoOp:
store 2 // GV_currentTime :: UInt
store 1 // GV_currentStep :: UInt
byte base64(AA==)
swap
extract 0 40
app_global_put
byte base64()
load 1 // GV_currentStep :: UInt
itob
load 2 // GV_currentTime :: UInt
itob
concat
app_global_put
txn OnCompletion
int NoOp
==
assert
// checked on completion
callsub l9_LF_updateMbr
updateState:
load 3 // GV_wasntMeth :: Bool
bnz done
apiReturn_noCheck:
byte base64(FR98dQ==)
load 4 // GV_apiRet :: Null
concat
log // up to 4 bytes
done:
int 1
return
_reachi_1:
int 1
load 1 // GV_currentStep :: UInt
==
assert
l4_LF_svsLoad_1:
dup
extract 0 32
store 14 // Role1/65
int 32
extract_uint64
store 13 // request/66
load 11 // v127
btoi
store 12 // v126
byte base64(1RUZFA==)
load 12 // v126
itob
concat
log // up to 12 bytes
// ^ log: "_reach_e1" [v126] "_reach_e1(uint64)"
load 12 // v126
callsub l2_LF_timeCheck
load 13 // request/66
callsub l5_LF_checkTxn_False
// ^ CheckPay
// at ./index.rsh:30:5:dot
l6_LF_svsDump_2:
load 14 // Role1/65
load 13 // request/66
itob
concat
int 2
global Round
b updateStateNoOp
_reachi_2:
int 2
load 1 // GV_currentStep :: UInt
==
assert
l7_LF_svsLoad_2:
dup
extract 0 32
store 14 // Role1/65
int 32
extract_uint64
store 13 // request/66
load 11 // v130
int 0
extract_uint64
store 12 // v129
byte base64(pG3Rfg==)
load 12 // v129
itob
concat
load 11 // v130
extract 8 128
concat
log // up to 140 bytes
// ^ log: "_reach_e2" [v129,info/79] "_reach_e2(uint64,byte[128])"
load 12 // v129
callsub l2_LF_timeCheck
load 14 // Role1/65
txn Sender
==
assert
// ^ Claim: sender correct
// at ./index.rsh:37:5:dot
load 13 // request/66
// resource: R_Account
load 14 // Role1/65
callsub l8_LF_makeTxn_False_False_False_True
updateStateHalt:
txn OnCompletion
int DeleteApplication
==
assert
// checked on completion
callsub l9_LF_updateMbr
// resource: R_Account
int 0
global CurrentApplicationAddress
global CreatorAddress
callsub l10_LF_makeTxn_False_True_False_True
b updateState
_reachp_0:
callsub l0_LF_wasntMeth
int 100000
l1_LF_mbrAdd:
load 6 // GV_mbrAdd :: UInt
+
store 6 // GV_mbrAdd :: UInt
txna ApplicationArgs 1
store 11 // v124
b _reachi_0
_reachp_1:
callsub l0_LF_wasntMeth
txna ApplicationArgs 1
store 11 // v127
b _reachi_1
_reachp_2:
callsub l0_LF_wasntMeth
txna ApplicationArgs 1
store 11 // v130
b _reachi_2
alloc:
int 0
txn GlobalNumUint
==
assert
int 2
txn GlobalNumByteSlice
==
assert
int 0
txn LocalNumUint
==
assert
int 0
txn LocalNumByteSlice
==
assert
callsub l0_LF_wasntMeth
int 40
bzero
int 0
int 0
b updateStateNoOp
apiReturn_check:
txn OnCompletion
int NoOp
==
assert
// checked on completion
b apiReturn_noCheck
l11_LF_makeTxnK_False_True:
int 0
itxn_field Fee
int pay
itxn_field TypeEnum
itxn_field Receiver
itxn_field Amount
itxn_submit
retsub
updateMbr_eq:
pop
retsub
updateMbr_neg:
swap
-
dup
store 6 // GV_mbrAdd :: UInt
global CreatorAddress
callsub l8_LF_makeTxn_False_False_False_True
retsub
updateMbr_pos_eq:
-
dup
bz updateMbr_eq
dup
store 6 // GV_mbrAdd :: UInt
callsub l5_LF_checkTxn_False
retsub
l0_LF_wasntMeth:
int 1
store 3 // GV_wasntMeth :: Bool
retsub
l2_LF_timeCheck:
dup
int 0
==
swap
load 2 // GV_currentTime :: UInt
==
||
assert
retsub
l9_LF_updateMbr:
load 6 // GV_mbrAdd :: UInt
load 7 // GV_mbrSub :: UInt
dup2
>=
bz updateMbr_neg
b updateMbr_pos_eq
l8_LF_makeTxn_False_False_False_True:
itxn_begin
b l11_LF_makeTxnK_False_True
l5_LF_checkTxn_False:
// resource: R_Txn
txn GroupIndex
load 0 // GV_txnCounter :: UInt
int 1
+
dup
store 0 // GV_txnCounter :: UInt
-
dupn 2
gtxns Receiver
global CurrentApplicationAddress
==
assert
gtxns TypeEnum
int pay
==
assert
gtxns Amount
==
assert
retsub
l10_LF_makeTxn_False_True_False_True:
itxn_begin
itxn_field CloseRemainderTo
b l11_LF_makeTxnK_False_True
