/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ReceiverInterface extends utils.Interface {
  functions: {
    "approveAppointment()": FunctionFragment;
    "generateReciept(string,uint256,uint256,address,address,address)": FunctionFragment;
    "getName()": FunctionFragment;
    "getRoleName()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "receiveItems(string,uint256)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "updateInventoryRecord(uint256)": FunctionFragment;
    "updateReciept(uint256,uint256,uint256,address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveAppointment"
      | "generateReciept"
      | "getName"
      | "getRoleName"
      | "onERC721Received"
      | "receiveItems"
      | "setName"
      | "updateInventoryRecord"
      | "updateReciept"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveAppointment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateReciept",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveItems",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInventoryRecord",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReciept",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateReciept",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInventoryRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReciept",
    data: BytesLike
  ): Result;

  events: {
    "AppointmentApproved(string)": EventFragment;
    "InventRecordUpdated(string,string,uint256)": EventFragment;
    "ItemsReceived(string,string,string,uint256)": EventFragment;
    "ReceiptCreated(string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppointmentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InventRecordUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiptCreated"): EventFragment;
}

export interface AppointmentApprovedEventObject {
  message: string;
}
export type AppointmentApprovedEvent = TypedEvent<
  [string],
  AppointmentApprovedEventObject
>;

export type AppointmentApprovedEventFilter =
  TypedEventFilter<AppointmentApprovedEvent>;

export interface InventRecordUpdatedEventObject {
  phase: string;
  message: string;
  id: BigNumber;
}
export type InventRecordUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  InventRecordUpdatedEventObject
>;

export type InventRecordUpdatedEventFilter =
  TypedEventFilter<InventRecordUpdatedEvent>;

export interface ItemsReceivedEventObject {
  phase: string;
  message: string;
  asset_name: string;
  id: BigNumber;
}
export type ItemsReceivedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ItemsReceivedEventObject
>;

export type ItemsReceivedEventFilter = TypedEventFilter<ItemsReceivedEvent>;

export interface ReceiptCreatedEventObject {
  message: string;
  asset_name: string;
  id: BigNumber;
}
export type ReceiptCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  ReceiptCreatedEventObject
>;

export type ReceiptCreatedEventFilter = TypedEventFilter<ReceiptCreatedEvent>;

export interface Receiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveAppointment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateReciept(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getRoleName(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveItems(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReciept(
      asset_id: PromiseOrValue<BigNumberish>,
      resource_id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveAppointment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateReciept(
    asset_name: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<BigNumberish>,
    verifier: PromiseOrValue<string>,
    issuer: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  getRoleName(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveItems(
    asset_name: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInventoryRecord(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReciept(
    asset_id: PromiseOrValue<BigNumberish>,
    resource_id: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<BigNumberish>,
    issuer: PromiseOrValue<string>,
    verifier: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveAppointment(overrides?: CallOverrides): Promise<void>;

    generateReciept(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getName(overrides?: CallOverrides): Promise<string>;

    getRoleName(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    receiveItems(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReciept(
      asset_id: PromiseOrValue<BigNumberish>,
      resource_id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AppointmentApproved(string)"(
      message?: null
    ): AppointmentApprovedEventFilter;
    AppointmentApproved(message?: null): AppointmentApprovedEventFilter;

    "InventRecordUpdated(string,string,uint256)"(
      phase?: null,
      message?: null,
      id?: null
    ): InventRecordUpdatedEventFilter;
    InventRecordUpdated(
      phase?: null,
      message?: null,
      id?: null
    ): InventRecordUpdatedEventFilter;

    "ItemsReceived(string,string,string,uint256)"(
      phase?: null,
      message?: null,
      asset_name?: null,
      id?: null
    ): ItemsReceivedEventFilter;
    ItemsReceived(
      phase?: null,
      message?: null,
      asset_name?: null,
      id?: null
    ): ItemsReceivedEventFilter;

    "ReceiptCreated(string,string,uint256)"(
      message?: null,
      asset_name?: null,
      id?: null
    ): ReceiptCreatedEventFilter;
    ReceiptCreated(
      message?: null,
      asset_name?: null,
      id?: null
    ): ReceiptCreatedEventFilter;
  };

  estimateGas: {
    approveAppointment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateReciept(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleName(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveItems(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReciept(
      asset_id: PromiseOrValue<BigNumberish>,
      resource_id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveAppointment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateReciept(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveItems(
      asset_name: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReciept(
      asset_id: PromiseOrValue<BigNumberish>,
      resource_id: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
