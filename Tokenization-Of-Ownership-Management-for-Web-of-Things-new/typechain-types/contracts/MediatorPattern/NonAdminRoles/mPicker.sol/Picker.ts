/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface PickerInterface extends utils.Interface {
  functions: {
    "getContractAddress()": FunctionFragment;
    "getName()": FunctionFragment;
    "getStorageLoc(uint256)": FunctionFragment;
    "inventoryDelivered(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "packInventory(uint256)": FunctionFragment;
    "pickInventory()": FunctionFragment;
    "receiveOrder(uint256)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "updateInventoryRecord(uint256)": FunctionFragment;
    "updateStorageReport(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getContractAddress"
      | "getName"
      | "getStorageLoc"
      | "inventoryDelivered"
      | "onERC721Received"
      | "packInventory"
      | "pickInventory"
      | "receiveOrder"
      | "setName"
      | "updateInventoryRecord"
      | "updateStorageReport"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStorageLoc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryDelivered",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "packInventory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pickInventory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInventoryRecord",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageReport",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageLoc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pickInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInventoryRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageReport",
    data: BytesLike
  ): Result;

  events: {
    "DeliverInventory()": EventFragment;
    "ItemPacked(string,string,uint256)": EventFragment;
    "OrderReceived(string,string,uint256)": EventFragment;
    "StorageLocation(string,string,uint256,uint256)": EventFragment;
    "UpdateInventoryRecord(string,uint256)": EventFragment;
    "UpdateStorageReport(string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeliverInventory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPacked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StorageLocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInventoryRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStorageReport"): EventFragment;
}

export interface DeliverInventoryEventObject {}
export type DeliverInventoryEvent = TypedEvent<[], DeliverInventoryEventObject>;

export type DeliverInventoryEventFilter =
  TypedEventFilter<DeliverInventoryEvent>;

export interface ItemPackedEventObject {
  phase: string;
  message: string;
  id: BigNumber;
}
export type ItemPackedEvent = TypedEvent<
  [string, string, BigNumber],
  ItemPackedEventObject
>;

export type ItemPackedEventFilter = TypedEventFilter<ItemPackedEvent>;

export interface OrderReceivedEventObject {
  phase: string;
  message: string;
  id: BigNumber;
}
export type OrderReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  OrderReceivedEventObject
>;

export type OrderReceivedEventFilter = TypedEventFilter<OrderReceivedEvent>;

export interface StorageLocationEventObject {
  phase: string;
  message: string;
  id: BigNumber;
  rack_no: BigNumber;
}
export type StorageLocationEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StorageLocationEventObject
>;

export type StorageLocationEventFilter = TypedEventFilter<StorageLocationEvent>;

export interface UpdateInventoryRecordEventObject {
  phase: string;
  id: BigNumber;
}
export type UpdateInventoryRecordEvent = TypedEvent<
  [string, BigNumber],
  UpdateInventoryRecordEventObject
>;

export type UpdateInventoryRecordEventFilter =
  TypedEventFilter<UpdateInventoryRecordEvent>;

export interface UpdateStorageReportEventObject {
  phase: string;
  message: string;
  id: BigNumber;
}
export type UpdateStorageReportEvent = TypedEvent<
  [string, string, BigNumber],
  UpdateStorageReportEventObject
>;

export type UpdateStorageReportEventFilter =
  TypedEventFilter<UpdateStorageReportEvent>;

export interface Picker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PickerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getStorageLoc(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inventoryDelivered(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    packInventory(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pickInventory(overrides?: CallOverrides): Promise<[string]>;

    receiveOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStorageReport(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getContractAddress(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  getStorageLoc(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inventoryDelivered(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  packInventory(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pickInventory(overrides?: CallOverrides): Promise<string>;

  receiveOrder(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInventoryRecord(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStorageReport(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractAddress(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    getStorageLoc(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    inventoryDelivered(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    packInventory(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pickInventory(overrides?: CallOverrides): Promise<string>;

    receiveOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageReport(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeliverInventory()"(): DeliverInventoryEventFilter;
    DeliverInventory(): DeliverInventoryEventFilter;

    "ItemPacked(string,string,uint256)"(
      phase?: null,
      message?: null,
      id?: null
    ): ItemPackedEventFilter;
    ItemPacked(phase?: null, message?: null, id?: null): ItemPackedEventFilter;

    "OrderReceived(string,string,uint256)"(
      phase?: null,
      message?: null,
      id?: null
    ): OrderReceivedEventFilter;
    OrderReceived(
      phase?: null,
      message?: null,
      id?: null
    ): OrderReceivedEventFilter;

    "StorageLocation(string,string,uint256,uint256)"(
      phase?: null,
      message?: null,
      id?: null,
      rack_no?: null
    ): StorageLocationEventFilter;
    StorageLocation(
      phase?: null,
      message?: null,
      id?: null,
      rack_no?: null
    ): StorageLocationEventFilter;

    "UpdateInventoryRecord(string,uint256)"(
      phase?: null,
      id?: null
    ): UpdateInventoryRecordEventFilter;
    UpdateInventoryRecord(
      phase?: null,
      id?: null
    ): UpdateInventoryRecordEventFilter;

    "UpdateStorageReport(string,string,uint256)"(
      phase?: null,
      message?: null,
      id?: null
    ): UpdateStorageReportEventFilter;
    UpdateStorageReport(
      phase?: null,
      message?: null,
      id?: null
    ): UpdateStorageReportEventFilter;
  };

  estimateGas: {
    getContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getStorageLoc(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inventoryDelivered(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    packInventory(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pickInventory(overrides?: CallOverrides): Promise<BigNumber>;

    receiveOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStorageReport(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStorageLoc(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inventoryDelivered(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    packInventory(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pickInventory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageReport(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
