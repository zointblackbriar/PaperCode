/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IPickerInterface extends utils.Interface {
  functions: {
    "getStorageLocation()": FunctionFragment;
    "inventoryDelivered(uint256)": FunctionFragment;
    "packInventory(uint256)": FunctionFragment;
    "pickInventory(uint256)": FunctionFragment;
    "updateInventoryRecord(uint256,address,address)": FunctionFragment;
    "updateStorageReport(uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getStorageLocation"
      | "inventoryDelivered"
      | "packInventory"
      | "pickInventory"
      | "updateInventoryRecord"
      | "updateStorageReport"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStorageLocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryDelivered",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "packInventory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pickInventory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInventoryRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageReport",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getStorageLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pickInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInventoryRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageReport",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPicker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPickerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getStorageLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inventoryDelivered(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    packInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pickInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStorageReport(
      Asset_id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getStorageLocation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inventoryDelivered(
    Asset_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  packInventory(
    Asset_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pickInventory(
    Asset_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInventoryRecord(
    id: PromiseOrValue<BigNumberish>,
    issuer: PromiseOrValue<string>,
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStorageReport(
    Asset_id: PromiseOrValue<BigNumberish>,
    issuer: PromiseOrValue<string>,
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getStorageLocation(overrides?: CallOverrides): Promise<BigNumber>;

    inventoryDelivered(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    packInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pickInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageReport(
      Asset_id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getStorageLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inventoryDelivered(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    packInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pickInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStorageReport(
      Asset_id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getStorageLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inventoryDelivered(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    packInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pickInventory(
      Asset_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInventoryRecord(
      id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageReport(
      Asset_id: PromiseOrValue<BigNumberish>,
      issuer: PromiseOrValue<string>,
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
