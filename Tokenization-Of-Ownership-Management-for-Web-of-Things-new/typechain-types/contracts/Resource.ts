/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ResourceInterface extends utils.Interface {
  functions: {
    "createResource(string,string,uint256,address,address,address)": FunctionFragment;
    "deleteResource(string,string,uint256,string)": FunctionFragment;
    "getName()": FunctionFragment;
    "readResource(string,string,uint256,string)": FunctionFragment;
    "updateResource(string,string,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createResource"
      | "deleteResource"
      | "getName"
      | "readResource"
      | "updateResource"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateResource",
    data: BytesLike
  ): Result;

  events: {
    "ResourceCreated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ResourceCreated"): EventFragment;
}

export interface ResourceCreatedEventObject {}
export type ResourceCreatedEvent = TypedEvent<[], ResourceCreatedEventObject>;

export type ResourceCreatedEventFilter = TypedEventFilter<ResourceCreatedEvent>;

export interface Resource extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResourceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createResource(
      resource_name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    readResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createResource(
    resource_name: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    tokenUri: PromiseOrValue<BigNumberish>,
    verifier: PromiseOrValue<string>,
    issuer: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteResource(
    name: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    access_type: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  readResource(
    name: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    access_type: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateResource(
    name: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    access_type: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createResource(
      resource_name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getName(overrides?: CallOverrides): Promise<string>;

    readResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ResourceCreated()"(): ResourceCreatedEventFilter;
    ResourceCreated(): ResourceCreatedEventFilter;
  };

  estimateGas: {
    createResource(
      resource_name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    readResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createResource(
      resource_name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      tokenUri: PromiseOrValue<BigNumberish>,
      verifier: PromiseOrValue<string>,
      issuer: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateResource(
      name: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      access_type: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
