/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OraclizeIInterface extends utils.Interface {
  functions: {
    "getPrice(string,uint256)": FunctionFragment;
    "getPrice(string)": FunctionFragment;
    "setProofType(bytes1)": FunctionFragment;
    "query2(uint256,string,string,string)": FunctionFragment;
    "queryN(uint256,string,bytes)": FunctionFragment;
    "query2_withGasLimit(uint256,string,string,string,uint256)": FunctionFragment;
    "randomDS_getSessionPubKeyHash()": FunctionFragment;
    "query(uint256,string,string)": FunctionFragment;
    "cbAddress()": FunctionFragment;
    "query_withGasLimit(uint256,string,string,uint256)": FunctionFragment;
    "queryN_withGasLimit(uint256,string,bytes,uint256)": FunctionFragment;
    "setCustomGasPrice(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPrice(string,uint256)"
      | "getPrice(string)"
      | "setProofType"
      | "query2"
      | "queryN"
      | "query2_withGasLimit"
      | "randomDS_getSessionPubKeyHash"
      | "query"
      | "cbAddress"
      | "query_withGasLimit"
      | "queryN_withGasLimit"
      | "setCustomGasPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPrice(string,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProofType",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "query2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryN",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "query2_withGasLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "randomDS_getSessionPubKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "cbAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "query_withGasLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryN_withGasLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPrice(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProofType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "query2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "query2_withGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomDS_getSessionPubKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cbAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "query_withGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryN_withGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomGasPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OraclizeI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OraclizeIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "getPrice(string,uint256)"(
      _datasource: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getPrice(string)"(
      _datasource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProofType(
      _proofType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    query2(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryN(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    query2_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    randomDS_getSessionPubKeyHash(
      overrides?: CallOverrides
    ): Promise<[string] & { _sessionKeyHash: string }>;

    query(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cbAddress(overrides?: CallOverrides): Promise<[string]>;

    query_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryN_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCustomGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "getPrice(string,uint256)"(
    _datasource: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getPrice(string)"(
    _datasource: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProofType(
    _proofType: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  query2(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _arg1: PromiseOrValue<string>,
    _arg2: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryN(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _argN: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  query2_withGasLimit(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _arg1: PromiseOrValue<string>,
    _arg2: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  randomDS_getSessionPubKeyHash(overrides?: CallOverrides): Promise<string>;

  query(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _arg: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cbAddress(overrides?: CallOverrides): Promise<string>;

  query_withGasLimit(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _arg: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryN_withGasLimit(
    _timestamp: PromiseOrValue<BigNumberish>,
    _datasource: PromiseOrValue<string>,
    _argN: PromiseOrValue<BytesLike>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCustomGasPrice(
    _gasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "getPrice(string,uint256)"(
      _datasource: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(string)"(
      _datasource: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProofType(
      _proofType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    query2(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    queryN(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    query2_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    randomDS_getSessionPubKeyHash(overrides?: CallOverrides): Promise<string>;

    query(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    cbAddress(overrides?: CallOverrides): Promise<string>;

    query_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    queryN_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setCustomGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "getPrice(string,uint256)"(
      _datasource: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getPrice(string)"(
      _datasource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProofType(
      _proofType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    query2(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryN(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    query2_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    randomDS_getSessionPubKeyHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    query(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cbAddress(overrides?: CallOverrides): Promise<BigNumber>;

    query_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryN_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCustomGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "getPrice(string,uint256)"(
      _datasource: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getPrice(string)"(
      _datasource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProofType(
      _proofType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    query2(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryN(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    query2_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg1: PromiseOrValue<string>,
      _arg2: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    randomDS_getSessionPubKeyHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    query(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    query_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _arg: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryN_withGasLimit(
      _timestamp: PromiseOrValue<BigNumberish>,
      _datasource: PromiseOrValue<string>,
      _argN: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCustomGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
