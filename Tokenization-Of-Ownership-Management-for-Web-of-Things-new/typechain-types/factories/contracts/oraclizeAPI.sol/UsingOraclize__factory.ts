/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UsingOraclize,
  UsingOraclizeInterface,
} from "../../../contracts/oraclizeAPI.sol/UsingOraclize";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "_myid",
        type: "bytes32",
      },
      {
        name: "_result",
        type: "string",
      },
    ],
    name: "__callback",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_myid",
        type: "bytes32",
      },
      {
        name: "_result",
        type: "string",
      },
      {
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "__callback",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102ca806100206000396000f3fe60806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166327dc297e811461005057806338bbfa501461010c575b600080fd5b34801561005c57600080fd5b5061010a6004803603604081101561007357600080fd5b8135919081019060408101602082013564010000000081111561009557600080fd5b8201836020820111156100a757600080fd5b803590602001918460018302840111640100000000831117156100c957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061024d945050505050565b005b34801561011857600080fd5b5061010a6004803603606081101561012f57600080fd5b8135919081019060408101602082013564010000000081111561015157600080fd5b82018360208201111561016357600080fd5b8035906020019184600183028401116401000000008311171561018557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101d857600080fd5b8201836020820111156101ea57600080fd5b8035906020019184600183028401116401000000008311171561020c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061026d945050505050565b604080516000815260208101909152610269908390839061026d565b5050565b5050600080805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff555056fea165627a7a7230582041ba56053b63377597d8f76c9b81d4d395eb8573266594778f68912d1939eb540029";

type UsingOraclizeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UsingOraclizeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UsingOraclize__factory extends ContractFactory {
  constructor(...args: UsingOraclizeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UsingOraclize> {
    return super.deploy(overrides || {}) as Promise<UsingOraclize>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UsingOraclize {
    return super.attach(address) as UsingOraclize;
  }
  override connect(signer: Signer): UsingOraclize__factory {
    return super.connect(signer) as UsingOraclize__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UsingOraclizeInterface {
    return new utils.Interface(_abi) as UsingOraclizeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UsingOraclize {
    return new Contract(address, _abi, signerOrProvider) as UsingOraclize;
  }
}
