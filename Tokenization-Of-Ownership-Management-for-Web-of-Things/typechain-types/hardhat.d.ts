/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Token__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "ERC677Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Receiver__factory>;
    getContractFactory(
      name: "LinkToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkToken__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "ChainlinkRequestInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkRequestInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "LinkTokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenReceiver__factory>;
    getContractFactory(
      name: "ChainlinkClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkClient__factory>;
    getContractFactory(
      name: "ChainlinkRequestInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkRequestInterface__factory>;
    getContractFactory(
      name: "ENSInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OperatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "PointerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PointerInterface__factory>;
    getContractFactory(
      name: "ENSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSResolver__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Issuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Issuer__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "APIConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.APIConsumer__factory>;
    getContractFactory(
      name: "ComponentCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComponentCore__factory>;
    getContractFactory(
      name: "ComponentRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComponentRole__factory>;
    getContractFactory(
      name: "HelperContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelperContract__factory>;
    getContractFactory(
      name: "IComponent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComponent__factory>;
    getContractFactory(
      name: "MainContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainContract__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC725",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC725__factory>;
    getContractFactory(
      name: "FNFToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FNFToken__factory>;
    getContractFactory(
      name: "Fractional",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fractional__factory>;
    getContractFactory(
      name: "FractionalNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FractionalNFT__factory>;
    getContractFactory(
      name: "APIConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.APIConsumer__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AccessControlMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlMediator__factory>;
    getContractFactory(
      name: "Employee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Employee__factory>;
    getContractFactory(
      name: "Manager888",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Manager888__factory>;
    getContractFactory(
      name: "EmployeeRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmployeeRole__factory>;
    getContractFactory(
      name: "AccessControlMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlMediator__factory>;
    getContractFactory(
      name: "Administrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Administrator__factory>;
    getContractFactory(
      name: "Employee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Employee__factory>;
    getContractFactory(
      name: "Manager888",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Manager888__factory>;
    getContractFactory(
      name: "EmployeeRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmployeeRole__factory>;
    getContractFactory(
      name: "Auditor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Auditor__factory>;
    getContractFactory(
      name: "IAuditor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuditor__factory>;
    getContractFactory(
      name: "Manager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Manager__factory>;
    getContractFactory(
      name: "IPicker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPicker__factory>;
    getContractFactory(
      name: "Picker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Picker__factory>;
    getContractFactory(
      name: "IPutaway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPutaway__factory>;
    getContractFactory(
      name: "Putaway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Putaway__factory>;
    getContractFactory(
      name: "IReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReceiver__factory>;
    getContractFactory(
      name: "Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Receiver__factory>;
    getContractFactory(
      name: "Supplier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Supplier__factory>;
    getContractFactory(
      name: "ITransporter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransporter__factory>;
    getContractFactory(
      name: "Transporter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transporter__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "MockOracleClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracleClient__factory>;
    getContractFactory(
      name: "MManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MManager__factory>;
    getContractFactory(
      name: "Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Receiver__factory>;
    getContractFactory(
      name: "Resource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resource__factory>;
    getContractFactory(
      name: "TestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestContract__factory>;

    getContractAt(
      name: "ERC677Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Token>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "ERC677Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Receiver>;
    getContractAt(
      name: "LinkToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkToken>;
    getContractAt(
      name: "BasicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "ChainlinkRequestInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkRequestInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "LinkTokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenReceiver>;
    getContractAt(
      name: "ChainlinkClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkClient>;
    getContractAt(
      name: "ChainlinkRequestInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkRequestInterface>;
    getContractAt(
      name: "ENSInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OperatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "PointerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PointerInterface>;
    getContractAt(
      name: "ENSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSResolver>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Issuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Issuer>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "APIConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.APIConsumer>;
    getContractAt(
      name: "ComponentCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComponentCore>;
    getContractAt(
      name: "ComponentRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComponentRole>;
    getContractAt(
      name: "HelperContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HelperContract>;
    getContractAt(
      name: "IComponent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComponent>;
    getContractAt(
      name: "MainContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainContract>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC725",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC725>;
    getContractAt(
      name: "FNFToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FNFToken>;
    getContractAt(
      name: "Fractional",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fractional>;
    getContractAt(
      name: "FractionalNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FractionalNFT>;
    getContractAt(
      name: "APIConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.APIConsumer>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AccessControlMediator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlMediator>;
    getContractAt(
      name: "Employee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Employee>;
    getContractAt(
      name: "Manager888",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Manager888>;
    getContractAt(
      name: "EmployeeRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmployeeRole>;
    getContractAt(
      name: "AccessControlMediator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlMediator>;
    getContractAt(
      name: "Administrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Administrator>;
    getContractAt(
      name: "Employee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Employee>;
    getContractAt(
      name: "Manager888",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Manager888>;
    getContractAt(
      name: "EmployeeRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmployeeRole>;
    getContractAt(
      name: "Auditor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Auditor>;
    getContractAt(
      name: "IAuditor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuditor>;
    getContractAt(
      name: "Manager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Manager>;
    getContractAt(
      name: "IPicker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPicker>;
    getContractAt(
      name: "Picker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Picker>;
    getContractAt(
      name: "IPutaway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPutaway>;
    getContractAt(
      name: "Putaway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Putaway>;
    getContractAt(
      name: "IReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReceiver>;
    getContractAt(
      name: "Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Receiver>;
    getContractAt(
      name: "Supplier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Supplier>;
    getContractAt(
      name: "ITransporter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransporter>;
    getContractAt(
      name: "Transporter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Transporter>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "MockOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "MockOracleClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracleClient>;
    getContractAt(
      name: "MManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MManager>;
    getContractAt(
      name: "Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Receiver>;
    getContractAt(
      name: "Resource",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resource>;
    getContractAt(
      name: "TestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
