/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WebofThingsDeviceInterface extends utils.Interface {
  functions: {
    "getSampleMessage()": FunctionFragment;
    "getWotDescriptionName()": FunctionFragment;
    "getWotName()": FunctionFragment;
    "getWotSpecificationName()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipTransfer(address)": FunctionFragment;
    "woTDescription()": FunctionFragment;
    "woTName()": FunctionFragment;
    "woTSpecification(uint256)": FunctionFragment;
    "wotDeviceHandOver()": FunctionFragment;
    "wotNameUpdate(string)": FunctionFragment;
    "wotPropertyAssigner(address,string,string,string)": FunctionFragment;
    "wotSpecificationUpdate(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSampleMessage"
      | "getWotDescriptionName"
      | "getWotName"
      | "getWotSpecificationName"
      | "owner"
      | "ownershipTransfer"
      | "woTDescription"
      | "woTName"
      | "woTSpecification"
      | "wotDeviceHandOver"
      | "wotNameUpdate"
      | "wotPropertyAssigner"
      | "wotSpecificationUpdate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSampleMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWotDescriptionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWotName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWotSpecificationName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "woTDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "woTName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "woTSpecification",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wotDeviceHandOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wotNameUpdate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wotPropertyAssigner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wotSpecificationUpdate",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSampleMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWotDescriptionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWotName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWotSpecificationName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "woTDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "woTName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "woTSpecification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wotDeviceHandOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wotNameUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wotPropertyAssigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wotSpecificationUpdate",
    data: BytesLike
  ): Result;

  events: {
    "Logging(string,address)": EventFragment;
    "RequestVolume(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Logging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestVolume"): EventFragment;
}

export interface LoggingEventObject {
  message: string;
  findoutAddress: string;
}
export type LoggingEvent = TypedEvent<[string, string], LoggingEventObject>;

export type LoggingEventFilter = TypedEventFilter<LoggingEvent>;

export interface RequestVolumeEventObject {
  requestId: string;
  volume: BigNumber;
}
export type RequestVolumeEvent = TypedEvent<
  [string, BigNumber],
  RequestVolumeEventObject
>;

export type RequestVolumeEventFilter = TypedEventFilter<RequestVolumeEvent>;

export interface WebofThingsDevice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WebofThingsDeviceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSampleMessage(overrides?: CallOverrides): Promise<[string]>;

    getWotDescriptionName(overrides?: CallOverrides): Promise<[string]>;

    getWotName(overrides?: CallOverrides): Promise<[string]>;

    getWotSpecificationName(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownershipTransfer(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    woTDescription(overrides?: CallOverrides): Promise<[string]>;

    woTName(overrides?: CallOverrides): Promise<[string]>;

    woTSpecification(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wotDeviceHandOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wotNameUpdate(
      newWotName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wotPropertyAssigner(
      _owner: PromiseOrValue<string>,
      _wotName: PromiseOrValue<string>,
      _wotDescription: PromiseOrValue<string>,
      _wotSpecification: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wotSpecificationUpdate(
      newSpecificationWot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getSampleMessage(overrides?: CallOverrides): Promise<string>;

  getWotDescriptionName(overrides?: CallOverrides): Promise<string>;

  getWotName(overrides?: CallOverrides): Promise<string>;

  getWotSpecificationName(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipTransfer(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  woTDescription(overrides?: CallOverrides): Promise<string>;

  woTName(overrides?: CallOverrides): Promise<string>;

  woTSpecification(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  wotDeviceHandOver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wotNameUpdate(
    newWotName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wotPropertyAssigner(
    _owner: PromiseOrValue<string>,
    _wotName: PromiseOrValue<string>,
    _wotDescription: PromiseOrValue<string>,
    _wotSpecification: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wotSpecificationUpdate(
    newSpecificationWot: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSampleMessage(overrides?: CallOverrides): Promise<string>;

    getWotDescriptionName(overrides?: CallOverrides): Promise<string>;

    getWotName(overrides?: CallOverrides): Promise<string>;

    getWotSpecificationName(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipTransfer(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    woTDescription(overrides?: CallOverrides): Promise<string>;

    woTName(overrides?: CallOverrides): Promise<string>;

    woTSpecification(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    wotDeviceHandOver(overrides?: CallOverrides): Promise<void>;

    wotNameUpdate(
      newWotName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wotPropertyAssigner(
      _owner: PromiseOrValue<string>,
      _wotName: PromiseOrValue<string>,
      _wotDescription: PromiseOrValue<string>,
      _wotSpecification: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wotSpecificationUpdate(
      newSpecificationWot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Logging(string,address)"(
      message?: null,
      findoutAddress?: null
    ): LoggingEventFilter;
    Logging(message?: null, findoutAddress?: null): LoggingEventFilter;

    "RequestVolume(bytes32,uint256)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      volume?: null
    ): RequestVolumeEventFilter;
    RequestVolume(
      requestId?: PromiseOrValue<BytesLike> | null,
      volume?: null
    ): RequestVolumeEventFilter;
  };

  estimateGas: {
    getSampleMessage(overrides?: CallOverrides): Promise<BigNumber>;

    getWotDescriptionName(overrides?: CallOverrides): Promise<BigNumber>;

    getWotName(overrides?: CallOverrides): Promise<BigNumber>;

    getWotSpecificationName(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipTransfer(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    woTDescription(overrides?: CallOverrides): Promise<BigNumber>;

    woTName(overrides?: CallOverrides): Promise<BigNumber>;

    woTSpecification(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wotDeviceHandOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wotNameUpdate(
      newWotName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wotPropertyAssigner(
      _owner: PromiseOrValue<string>,
      _wotName: PromiseOrValue<string>,
      _wotDescription: PromiseOrValue<string>,
      _wotSpecification: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wotSpecificationUpdate(
      newSpecificationWot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSampleMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWotDescriptionName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWotName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWotSpecificationName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipTransfer(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    woTDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    woTName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    woTSpecification(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wotDeviceHandOver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wotNameUpdate(
      newWotName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wotPropertyAssigner(
      _owner: PromiseOrValue<string>,
      _wotName: PromiseOrValue<string>,
      _wotDescription: PromiseOrValue<string>,
      _wotSpecification: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wotSpecificationUpdate(
      newSpecificationWot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
