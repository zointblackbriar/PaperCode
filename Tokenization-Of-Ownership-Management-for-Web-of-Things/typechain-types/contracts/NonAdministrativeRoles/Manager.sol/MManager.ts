/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MManagerInterface extends utils.Interface {
  functions: {
    "addRole(address,address)": FunctionFragment;
    "core()": FunctionFragment;
    "getAge()": FunctionFragment;
    "getContractAddress()": FunctionFragment;
    "getContractAddressEmployeeRole()": FunctionFragment;
    "getName()": FunctionFragment;
    "hasRole(address,address)": FunctionFragment;
    "job()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRole"
      | "core"
      | "getAge"
      | "getContractAddress"
      | "getContractAddressEmployeeRole"
      | "getName"
      | "hasRole"
      | "job"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressEmployeeRole",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "job", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressEmployeeRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "job", data: BytesLike): Result;

  events: {};
}

export interface MManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    getAge(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getContractAddressEmployeeRole(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getName(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    job(overrides?: CallOverrides): Promise<[string]>;
  };

  addRole(
    account: PromiseOrValue<string>,
    componentrole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  getAge(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractAddress(overrides?: CallOverrides): Promise<string>;

  getContractAddressEmployeeRole(overrides?: CallOverrides): Promise<string>;

  getName(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    account: PromiseOrValue<string>,
    componentrole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  job(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    core(overrides?: CallOverrides): Promise<string>;

    getAge(overrides?: CallOverrides): Promise<BigNumber>;

    getContractAddress(overrides?: CallOverrides): Promise<string>;

    getContractAddressEmployeeRole(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    hasRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    job(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    getAge(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getContractAddressEmployeeRole(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    job(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAge(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddressEmployeeRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      account: PromiseOrValue<string>,
      componentrole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    job(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
