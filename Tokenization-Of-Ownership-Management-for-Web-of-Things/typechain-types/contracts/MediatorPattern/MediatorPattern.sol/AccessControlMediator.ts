/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface AccessControlMediatorInterface extends utils.Interface {
  functions: {
    "accountAddRole(address,uint256)": FunctionFragment;
    "accountHasRole(address,address)": FunctionFragment;
    "accountHasRoleObject(address)": FunctionFragment;
    "accountRemoveRole(address,address)": FunctionFragment;
    "compareStringsbyBytes(string,string)": FunctionFragment;
    "getRole(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountAddRole"
      | "accountHasRole"
      | "accountHasRoleObject"
      | "accountRemoveRole"
      | "compareStringsbyBytes"
      | "getRole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountAddRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountHasRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountHasRoleObject",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountRemoveRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "compareStringsbyBytes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountAddRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountHasRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountHasRoleObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRemoveRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareStringsbyBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;

  events: {
    "Logging(string)": EventFragment;
    "RoleCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Logging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
}

export interface LoggingEventObject {
  description: string;
}
export type LoggingEvent = TypedEvent<[string], LoggingEventObject>;

export type LoggingEventFilter = TypedEventFilter<LoggingEvent>;

export interface RoleCreatedEventObject {
  r1: string;
}
export type RoleCreatedEvent = TypedEvent<[string], RoleCreatedEventObject>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export interface AccessControlMediator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlMediatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountAddRole(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountHasRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    accountHasRoleObject(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountRemoveRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compareStringsbyBytes(
      s1: PromiseOrValue<string>,
      s2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRole(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountAddRole(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountHasRole(
    account: PromiseOrValue<string>,
    employeeRole: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  accountHasRoleObject(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountRemoveRole(
    account: PromiseOrValue<string>,
    employeeRole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compareStringsbyBytes(
    s1: PromiseOrValue<string>,
    s2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRole(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountAddRole(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    accountHasRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accountHasRoleObject(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accountRemoveRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    compareStringsbyBytes(
      s1: PromiseOrValue<string>,
      s2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Logging(string)"(description?: null): LoggingEventFilter;
    Logging(description?: null): LoggingEventFilter;

    "RoleCreated(address)"(r1?: null): RoleCreatedEventFilter;
    RoleCreated(r1?: null): RoleCreatedEventFilter;
  };

  estimateGas: {
    accountAddRole(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accountHasRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountHasRoleObject(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accountRemoveRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compareStringsbyBytes(
      s1: PromiseOrValue<string>,
      s2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRole(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAddRole(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountHasRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountHasRoleObject(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountRemoveRole(
      account: PromiseOrValue<string>,
      employeeRole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compareStringsbyBytes(
      s1: PromiseOrValue<string>,
      s2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRole(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
